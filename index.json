[{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Nelson Bighetti","type":"authors"},{"authors":[],"categories":[],"content":"Challenge Details    Event Challenge Category     TG:Hack CTF 2020 Useless Crap PWN    Description  Here\u0026rsquo;s some useless crap for you. The flag is at /home/crap/flag.txt.\nnc crap.tghack.no 6001  or use a mirror closer to you:\n nc us.crap.tghack.no 6001 (US) nc asia.crap.tghack.no 6001 (Japan)  files:\n  crap  libc-2.31.so  ld-2.31.so   TL;DL  Leak Libc through unsorted bin view Get infinte arbitary write/read/heap allocations Write open/read/write ROP chain after seip of main function using allowed syscalls Stack pivot to our ROP chain and read flag.txt  TGHack 2020 had some challenging PWN tasks, and Useless Crap was one of the hardest that we were able to solve during the CTF.\nAs Detailed in the description of the challenge, the author provided the necessary files to run the binary as intended, our first thought was how to patch the binary to use the provided libc and ld files instead of our system libraries. Because this will make it easier for us when developing our exploit in a way that offsets are the same locally and remotely.\nTo make this happen we always patch the binary using the method described at Using Non-system Glibc\n$ mv crap old_crap $ python patch_binary.py crap libc.so.6 ld-2.31.so new_crap Current ld.so: Path: /usr/local/lib/ld-linux-x86-64.so.2 New ld.so: Path: /home/anisboss/pwn/tg/pwn/crap/patch/ld-2.31.so Adding RUNPATH: Path: /home/anisboss/pwn/tg/pwn/crap/patch Writing new binary new_crap Please rename /home/anisboss/pwn/tg/pwn/crap/patch/libc.so.6 to /home/anisboss/pwn/tg/pwn/crap/patch/libc.so.6. $ ldd new_crap linux-vdso.so.1 (0x00007ffd93345000) libseccomp.so.2 =\u0026gt; /usr/lib/x86_64-linux-gnu/libseccomp.so.2 (0x00007f8b6de51000) libc.so.6 =\u0026gt; /home/anisboss/pwn/tg/pwn/crap/patch/libc.so.6 (0x00007f8b6da96000) /home/anisboss/pwn/tg/pwn/crap/patch/ld-2.31.so =\u0026gt; /lib64/ld-linux-x86-64.so.2 (0x00007f8b6eed4000)  As u can see the new binary is linked to the provided libraries instead of the standard system libc/ld. In this way we can start running the binary and developing our exploit in the same environment as the remote server.\nReverse Engineering\nOpening up the binary in IDA, reveals a seccomp filter before starting the main function, which is a filter to block certain syscalls, based on the syscall number .\nscmp_filter_ctx v0 = seccomp_init(0); v2 = v0; if ( !v0 ) { puts(\u0026quot;seccomp_init() error\u0026quot;); exit(1); } seccomp_rule_add(v0, 2147418112LL, 0LL, 1LL); // read syscall seccomp_rule_add(v2, 2147418112LL, 231LL, 0LL); // exit_group syscall seccomp_rule_add(v2, 2147418112LL, 1LL, 1LL); // write syscall seccomp_rule_add(v2, 2147418112LL, 10LL, 0LL); // mprotect syscall seccomp_rule_add(v2, 2147418112LL, 2LL, 0LL); // open syscall seccomp_rule_add(v2, 2147418112LL, 3LL, 0LL); // close syscall if ( seccomp_load(v2) \u0026lt; 0 ) { seccomp_release(v2); puts(\u0026quot;seccomp_load() error\u0026quot;); exit(1); } return seccomp_release(v2); }  Using seccomp-tools, we can get the following table\n$ seccomp-tools dump ./new_crap line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x12 0xc000003e if (A != ARCH_X86_64) goto 0020 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x0f 0xffffffff if (A != 0xffffffff) goto 0020 0005: 0x15 0x0d 0x00 0x00000002 if (A == open) goto 0019 0006: 0x15 0x0c 0x00 0x00000003 if (A == close) goto 0019 0007: 0x15 0x0b 0x00 0x0000000a if (A == mprotect) goto 0019 0008: 0x15 0x0a 0x00 0x000000e7 if (A == exit_group) goto 0019 0009: 0x15 0x00 0x04 0x00000000 if (A != read) goto 0014 0010: 0x20 0x00 0x00 0x00000014 A = args[0] \u0026gt;\u0026gt; 32 0011: 0x15 0x00 0x08 0x00000000 if (A != 0x0) goto 0020 0012: 0x20 0x00 0x00 0x00000010 A = args[0] 0013: 0x15 0x05 0x06 0x00000000 if (A == 0x0) goto 0019 else goto 0020 0014: 0x15 0x00 0x05 0x00000001 if (A != write) goto 0020 0015: 0x20 0x00 0x00 0x00000014 A = args[0] \u0026gt;\u0026gt; 32 0016: 0x15 0x00 0x03 0x00000000 if (A != 0x0) goto 0020 0017: 0x20 0x00 0x00 0x00000010 A = args[0] 0018: 0x15 0x00 0x01 0x00000001 if (A != 0x1) goto 0020 0019: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0020: 0x06 0x00 0x00 0x00000000 return KILL  We can see that execve and execveat are blocked, which means no shell for us, fork/vfork/clone are blocked, so we can\u0026rsquo;t create new processes that are free of these seccomp restrictions. Our approach is to use ORW (open read write) capabilities but we should keep in mind that at lines 11-13 the program checks the first argument passed to read syscall and verify if it\u0026rsquo;s equal to 0 or not. If it\u0026rsquo;s the case then we will be allowed else the syscall will be blocked which means that we can only read from stdin with same analogy we can write only to stdout.\nNow moving to the main function, the program defines two major functions do_read() and do_write which are made for arbitrary 8 bytes read/write . this functions can be called only once but this will by bypassed later.\n// read from arbitrary address __int64 do_read() { __int64 *v1; // [sp+8h] [bp-18h]@3 __int64 v2; // [sp+10h] [bp-10h]@3 __int64 v3; // [sp+18h] [bp-8h]@1 v3 = *MK_FP(__FS__, 40LL); if ( read_count \u0026lt;= 1 ) { printf(\u0026quot;addr: \u0026quot;); __isoc99_scanf(\u0026quot;%lx\u0026quot;, \u0026amp;v1); empty_newline(); v2 = *v1; printf(\u0026quot;value: %p\\n\u0026quot;, v2); ++read_count; } else { puts(\u0026quot;No more reads for you!\u0026quot;); } return *MK_FP(__FS__, 40LL) ^ v3; } // write 8 bytes to arbitrary address __int64 do_write() { _QWORD *v1; // [sp+8h] [bp-18h]@3 __int64 v2; // [sp+10h] [bp-10h]@3 __int64 v3; // [sp+18h] [bp-8h]@1 v3 = *MK_FP(__FS__, 40LL); if ( write_count \u0026lt;= 1 ) { printf(\u0026quot;addr/value: \u0026quot;); __isoc99_scanf(\u0026quot;%lx %lx\u0026quot;, \u0026amp;v1); empty_newline(\u0026quot;%lx %lx\u0026quot;, \u0026amp;v1); *v1 = v2; ++write_count; } else { puts(\u0026quot;No more writes for you!\u0026quot;); } return *MK_FP(__FS__, 40LL) ^ v3; }  beyond that, there were another two functions leave_feedback and view_feedback which basically lets you write into long heap chunks using calloc function and view that content.\n//create large chunk void leave_feedback() { char *v0; // rsi@5 char v1; // [sp+Fh] [bp-1h]@5 if ( feedback ) { puts(\u0026quot;that's enough feedback for one day...\u0026quot;); } else { feedback = (char *)calloc(1uLL, 0x501uLL); printf(\u0026quot;feedback: \u0026quot;, 1281LL); if ( !fgets(feedback, 1280, stdin) ) exit(1); v0 = feedback; printf(\u0026quot;you entered: %s\\n\u0026quot;, feedback); puts(\u0026quot;Do you want to keep your feedback? (y/n)\u0026quot;); v1 = getchar(); empty_newline(\u0026quot;Do you want to keep your feedback? (y/n)\u0026quot;, v0); if ( v1 != 121 \u0026amp;\u0026amp; v1 == 110 ) free(feedback); } } // view created chunk content int view_feedback() { int result; // eax@2 if ( feedback ) result = printf(\u0026quot;feedback: %s\\n\u0026quot;, feedback); else result = puts(\u0026quot;Leave feedback first!\u0026quot;); return result; }  Exploitation\nSince the binary has PIE enabled we couldn\u0026rsquo;t use the read/write functions until we get a leak. which is somehow trivial in our case using the following process:\n  Allocate a chunk using leave_feedbackfunction and free it and since the seccomp filters uses heap to allocate its rules the freed chunk will never be merged with top chunk and considering the big size of allocation is 0x501 the freed chunk will go to unsorted bin because tcache bins can only holds size lower then 0x408.\n  The freed chunk now holds a libc address that we will use view_feedbackto print its content because the author doesn\u0026rsquo;t check if the chunk if freed or not before passing it to puts function thus trigger a UAF that leads to leaking libc address.\n  ","date":1586887064,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586887064,"objectID":"67ebf57ff6ecc1d1d972e7fd2ff5eeda","permalink":"/post/tghack-2020-useless-crap/","publishdate":"2020-04-14T18:57:44+01:00","relpermalink":"/post/tghack-2020-useless-crap/","section":"post","summary":"Challenge Details    Event Challenge Category     TG:Hack CTF 2020 Useless Crap PWN    Description  Here\u0026rsquo;s some useless crap for you. The flag is at /home/crap/flag.","tags":[],"title":"TG:HACK 2020   Useless Crap","type":"post"}]